@model DirectKeyDashboard.Charting.Domain.LineChart

@{
    var id = Guid.NewGuid().ToString();
    var jsId = id.Replace("-", "");
    var canvasID = $"line-chart-canvas-{id}";
}

<div class="chart-container" style="position:relative; width:60vw; margin-left:auto; margin-right:auto">
    <canvas id="@(Html.Raw(canvasID))"></canvas>
</div>

@*Inject CS variables as JSON strings, then parse into JS objects*@

<script type="text/javascript">
    if (window['lineChartScriptIds'] == null) {
        window['lineChartScriptIds'] = [];
    }
    window['lineChartScriptIds'].push('@Html.Raw(id)');

    if (window['lineChartData'] == null) {
        window['lineChartData'] = {};
    }

    // Add this chart's data to the window's global
    window['lineChartData']['@Html.Raw(jsId)'] = {
        labels: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Lines.Select(l => l.Label).ToList()))'),
        values: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Lines.Select(l => l.Vertices.Select(v => v.Value).ToList()).ToList()))'),
        colors: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Lines.Select(l => l.Color).ToList()))'),
        pointColors: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Lines.Select(l => l.PointColor).ToList()))'),
        categoryLabels: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CategoryLabels))')
    };
</script>

<script defer src="~/js/line-chart.js" id="@Html.Raw(id)" data-canvas-id="@Html.Raw(canvasID)"
                                                  data-line-width="3"
                                                  data-point-border-width="3"
                                                  data-js-id="@Html.Raw(jsId)"></script>