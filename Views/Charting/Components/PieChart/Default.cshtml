@model DirectKeyDashboard.Charting.Domain.PieChart

@{
    var id = Guid.NewGuid().ToString();
    var jsId = id.Replace("-", "");
    var canvasID = $"pie-chart-canvas-{id}";
}

<div class="chart-container" style="position:relative; width:60vw; margin-left:auto; margin-right:auto">
    <canvas id="@(Html.Raw(canvasID))"></canvas>
</div>

@*Inject CS variables as JSON strings, then parse into JS objects*@

<script type="text/javascript">
    if (window['pieChartScriptIds'] == null) {
        window['pieChartScriptIds'] = [];
    }
    window['pieChartScriptIds'].push('@Html.Raw(id)');

    if (window['pieChartData'] == null) {
        window['pieChartData'] = {};
    }

    // Add this chart's data to the window's global
    window['pieChartData']['@Html.Raw(jsId)'] = {
        labels: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Slices.Select(s => s.Label).ToList()))'),
        counts: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Slices.Select(s => s.Count).ToList()))'),
        backgroundColors: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Slices.Select(s => s.BackgroundColor).ToList()))'),
        borderColors: JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Slices.Select(s => s.BorderColor).ToList()))')
    };

</script>

<script defer src="~/js/pie-chart.js" id="@Html.Raw(id)" data-canvas-id="@Html.Raw(canvasID)"
                                                  data-chart-label="@Html.Raw(Model.Label)"
                                                  data-slice-border-width="1"
                                                  data-js-id="@Html.Raw(jsId)"></script>