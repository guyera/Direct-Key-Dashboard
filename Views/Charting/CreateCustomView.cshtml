@model CreateCustomViewModel

@using DirectKeyDashboard.Views.Charting
@using DirectKeyDashboard.Charting.Domain

@{
    ViewData["Title"] = "Charting Page";
    var viewTypeSelectId = "select-view-type";
    var groupedBarViewId = "grouped-bar-view";
    var barViewId = "bar-view";
    var chartViewGroupId = "chart-view-group";

    var chartTitleInputId = "input-chart-title";
    
    var projectionResultSelectContainerId = "projection-result-select-container";
    
    var summaryMethodSelectId = "summary-method-select";
    
    var timeRelativityCheckboxId = "time-relative-to-present-checkbox";
    var timeRelativityGroupId = "time-group";
    var timeRelativeId = "time-group-relative";
    var timeAbsoluteId = "time-group-absolute";
    var relativeTimeStartValueInputId = "relative-time-start-months";
    var relativeTimeStartGranularitySelectId = "relative-time-start-granularity-select";
    var absoluteTimeStartDatePickerId = "absolute-time-start-date-picker";

    string requiresProjectionAttr(CreateCustomViewModel.SummaryMethodOption opt) {
        return opt.RequiresProjection ? "true" : "false";
    }
}

@*TODO  InvervalStart, InvervalEnd*@

@*TODO  List of FloatCriteria*@

@*TODO  For bar charts, CategoryTokenKey and ValueTokenKey*@

@*TODO  For grouped bar charts, SuperDatasetCategoryTokenKey and list of ValueTokenKeys*@

<form class="form-group-container" asp-action="CreateCustomView" asp-controller="Charting" method="post">
    @*Shared content between all views*@
    
    <div>
        <select class="selectpicker" id="@viewTypeSelectId" onchange="model.selectViewType()" name="chartViewTypeId">
            <option value="none" selected>Select view type</option>
            @foreach (var viewType in CreateCustomViewModel.ViewOptions) {
                <option value="@viewType.ViewType">@viewType.DisplayName</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="@chartTitleInputId" style="margin: 0px;">Chart Title</label>
        <input type="text" class="form-control" id="@chartTitleInputId" placeholder="Chart Title" name="chartTitle" />
    </div>

    <div>
        <select class="selectpicker" id="@summaryMethodSelectId" onchange="model.selectSummaryMethod()" name="summaryMethod">
            <option value="none" selected>Select summary method</option>
            @foreach (var summaryMethodOption in CreateCustomViewModel.SummaryMethodOptions) {
                <option value="@summaryMethodOption.SummaryMethod" data-requires-projection="@requiresProjectionAttr(summaryMethodOption)">@summaryMethodOption.DisplayName</option>
            }
        </select>
    </div>

    <div id="@projectionResultSelectContainerId" style="display: none">
        <select class="selectpicker" name="projectionResult">
            <option value="none" selected>Select projection result</option>
            @foreach (var projectionResultOption in CreateCustomViewModel.ProjectionResultOptions) {
                <option value="@projectionResultOption.ProjectionResult">@projectionResultOption.DisplayName</option>
            }
        </select>
    </div>

    @*Content associated with a specific chart view*@
    <div id="@chartViewGroupId">

        @*Content associated with a grouped bar chart view*@
        <div class="form-group-container" style="display: none" id="@groupedBarViewId">
            EFGH
        </div>

        @*Content associated with a bar chart view*@
        <div class="form-group-container" style="display: none" id="@barViewId">
            ABCD
        </div>
    
    </div>

    <div>
        <label for="@timeRelativityCheckboxId">Time relative to present</label>
        <input id="@timeRelativityCheckboxId" type="checkbox" name="timeRelativeToPresent" onchange="model.selectTimeRelativity()" checked />
        <div id="@timeRelativityGroupId">
            <div id="@timeRelativeId" class="form-group-container">
                <div>
                    <label for="@relativeTimeStartValueInputId">Time Range</label>
                    <input id="@relativeTimeStartValueInputId" type="number" value="1" name="relativeTimeStartValue" min="1" />
                    <select id="@relativeTimeStartGranularitySelectId">
                        @foreach (var timeGranularityOption in CreateCustomViewModel.TimeGranularityOptions) {
                            <option value="@timeGranularityOption.TimeGranularity">@timeGranularityOption.DisplayName</option>
                        }
                    </select>
                </div>
            </div>

            <div id="@timeAbsoluteId" class="form-group-container" style="display: none">
                <input id="@absoluteTimeStartDatePickerId" data-provide="datepicker" class="datepicker" data-date-format="mm/dd/yyyy" onfocus="model.openAbsoluteTimeStartDatePicker()" />
            </div>
        </div>
    </div>
</form>

<script type="text/javascript">
    class CreateCustomViewModel {
        constructor() {
            this.barView = "@CreateCustomViewModel.ViewType.Bar";
            this.groupedBarView = "@CreateCustomViewModel.ViewType.GroupedBar";
        }

        initSelectViewType() {
            this.selectViewType = function selectViewType() {
                var selectedView = this.viewTypeSelectElem.val();
                this.chartViewGroupElem.children().hide();
                if (selectedView == this.barView) {
                    // Load view associated with bar charts
                    this.barViewElem.show();
                } else if (selectedView == this.groupedBarView) {
                    // Load view associated with grouped bar charts
                    this.groupedBarViewElem.show();
                }
            }
        }

        initSelectSummaryMethod() {
            this.selectSummaryMethod = function selectSummaryMethod() {
                var requiresProjection = this.summaryMethodSelectElem.find(':selected').data('requires-projection');
                if (requiresProjection) {
                    this.projectionResultSelectContainerElem.show();
                } else {
                    this.projectionResultSelectContainerElem.hide();
                }
            }
        }

        initSelectTimeRelativity() {
            this.selectTimeRelativity = function selectTimeRelativity() {
                var relative = this.timeRelativityCheckboxElem.prop('checked');
                if (relative) {
                    this.timeRelativityGroupElem.children().hide();
                    this.timeRelativeElem.show();
                } else {
                    this.timeRelativityGroupElem.children().hide();
                    this.timeAbsoluteElem.show();
                }
            }
        }

        initOpenAbsoluteTimeStartDatePicker() {
            this.openAbsoluteTimeStartDatePicker = function openAbsoluteTimeStartDatePicker() {
                this.absoluteTimeStartDatePickerElem.datepicker();
            }
        }

        init() {
            this.viewTypeSelectElem = $('#@viewTypeSelectId');
            this.chartViewGroupElem = $('#@chartViewGroupId');
            this.barViewElem = $('#@barViewId');
            this.groupedBarViewElem = $('#@groupedBarViewId');

            this.projectionResultSelectContainerElem = $('#@projectionResultSelectContainerId');

            this.summaryMethodSelectElem = $('#@summaryMethodSelectId');

            this.timeRelativityCheckboxElem = $('#@timeRelativityCheckboxId');
            this.timeRelativityGroupElem = $('#@timeRelativityGroupId');
            this.timeRelativeElem = $('#@timeRelativeId');
            this.timeAbsoluteElem = $('#@timeAbsoluteId');
            this.absoluteTimeStartDatePickerElem = $('#@absoluteTimeStartDatePickerId');

            this.initSelectViewType();
            this.initSelectSummaryMethod();
            this.initSelectTimeRelativity();
            this.initOpenAbsoluteTimeStartDatePicker();
        }
    }

    const model = new CreateCustomViewModel();
    
    // Init the model after window has loaded, so that we
    // have access to jquery. Necessary for server-side rendering
    // to be embedded into the page before jQuery and other
    // libraries.
    var prevOnload = window.onload;
    window.onload = function() {
        if (prevOnload) {
            prevOnload();
        }
        model.init();
    }
</script>