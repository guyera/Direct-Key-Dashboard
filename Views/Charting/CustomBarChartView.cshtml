@model DirectKeyDashboard.Charting.Domain.CustomBarChart

@using DirectKeyDashboard.Views.Charting
@using DirectKeyDashboard.Charting.Domain

@{
    ViewData["Title"] = "Custom Bar Chart View";
}

<div class="text-center">
    
    <div id="dynamic-chart-container" style="display: flex; flex-direction: column; width: 100%; align-items: center;">
        @{
            switch (Model.SummaryMethod) {
                case SummaryMethod.Count:
                    switch (Model.ProjectionResult) {
                        case ProjectionResult.String:
                            switch (Model.CriterionType) {
                                case CriterionType.Float:
                                default:
                                    @await Component.InvokeAsync(typeof(StringProjectingApiBarChartViewComponent), new {
                                        summary = new CountSummary<string>(),
                                        filter = new Filter<FloatCriterion>(Model.FloatCriteria.Select(fc => new FloatCriterion(fc.Key, fc.Value, fc.Relation)).ToList()),
                                        timeInterval = new TimeInterval(Model.IntervalStart, Model.IntervalEnd, null),
                                        projection = new SimpleGroupedProjection<string>(Model.CategoryTokenKey, Model.ValueTokenKey),
                                        drilldownAction = "StringProjectingApiLineChart",
                                        drilldownController = "Charting"
                                    })
                                    break;
                            }
                            break;
                        case ProjectionResult.Number:
                        default:
                            switch (Model.CriterionType) {
                                case CriterionType.Float:
                                default:
                                    @await Component.InvokeAsync(typeof(FloatProjectingApiGroupedBarChartViewComponent), new {
                                        summary = new CountSummary<float>(),
                                        filter = new Filter<FloatCriterion>(Model.FloatCriteria.Select(fc => new FloatCriterion(fc.Key, fc.Value, fc.Relation)).ToList()),
                                        timeInterval = new TimeInterval(Model.IntervalStart, Model.IntervalEnd, null),
                                        projection = new SimpleGroupedProjection<float>(Model.CategoryTokenKey, Model.ValueTokenKey),
                                        drilldownAction = "FloatProjectingApiLineChart",
                                        drilldownController = "Charting"
                                    })
                                    break;
                            }
                            break;
                    }
                    break;
                case SummaryMethod.Average:
                default:
                    switch (Model.ProjectionResult) {
                        case ProjectionResult.Number:
                            switch (Model.CriterionType) {
                                case CriterionType.Float:
                                default:
                                    @await Component.InvokeAsync(typeof(FloatProjectingApiGroupedBarChartViewComponent), new {
                                        summary = new AverageSummary(),
                                        filter = new Filter<FloatCriterion>(Model.FloatCriteria.Select(fc => new FloatCriterion(fc.Key, fc.Value, fc.Relation)).ToList()),
                                        timeInterval = new TimeInterval(Model.IntervalStart, Model.IntervalEnd, null),
                                        projection = new SimpleGroupedProjection<float>(Model.CategoryTokenKey, Model.ValueTokenKey),
                                        drilldownAction = "FloatProjectingApiLineChart",
                                        drilldownController = "Charting"
                                    })
                                    break;
                            }
                            break;
                        default:
                            throw new Exception("Cannot compute average over non-numerical values");
                    }
                    break;
            }
        }
    </div>
</div>