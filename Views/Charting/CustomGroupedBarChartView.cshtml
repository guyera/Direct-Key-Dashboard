@model DirectKeyDashboard.Charting.Domain.CustomGroupedBarChart

@using DirectKeyDashboard.Views.Charting
@using DirectKeyDashboard.Charting.Domain
@using Newtonsoft.Json.Linq

@* Displays a custom grouped bar chart by invoking the correct
   view component *@
@{
    ViewData["Title"] = "Custom Grouped Bar Chart View";
    DateTime intervalStart;
    DateTime intervalEnd;
    if (Model.TimeRelative) {
        intervalStart = DateTime.Now;
        switch (Model.RelativeTimeGranularity) {
            case RelativeTimeGranularity.Day:
                intervalStart.AddDays(Model.RelativeTimeValue.Value);
                break;
            case RelativeTimeGranularity.Month:
                intervalStart.AddMonths(Model.RelativeTimeValue.Value);
                break;
            case RelativeTimeGranularity.Year:
                intervalStart.AddYears(Model.RelativeTimeValue.Value);
                break;
        }
        intervalEnd = DateTime.Now;
    } else {
        intervalStart = Model.IntervalStart.Value;
        intervalEnd = Model.IntervalEnd.Value;
    }

    Summary<JObject, float> nonProjectingSummary = null;
    Summary<float, float> numberProjectingSummary = null;
    switch (Model.SummaryMethodDescriptor) {
        case SummaryMethodDescriptor.Count:
            nonProjectingSummary = new CountSummary<JObject>();
            break;
        case SummaryMethodDescriptor.Average:
            numberProjectingSummary = new AverageSummary();
        break;
        case SummaryMethodDescriptor.Median:
            numberProjectingSummary = new MedianSummary();
        break;
    }
     
}

<div class="text-center">
    
    <div id="dynamic-chart-container" style="display: flex; flex-direction: column; width: 100%; align-items: center;">
        @{
            if (SummaryMethod.FromDescriptor(Model.SummaryMethodDescriptor).RequiresProjection) {
                @await Component.InvokeAsync(typeof(FloatProjectingApiGroupedBarChartViewComponent), new {
                                summary = numberProjectingSummary,
                                filter = new Filter<Criterion>(Model.FloatCriteria?.Select(fc => new FloatCriterion(fc.Key, fc.Value, fc.Relation))?.ToList()),
                                timeInterval = new TimeInterval(intervalStart, intervalEnd, null),
                                projection = new SimpleCompositeGroupedProjection<float>(Model.DatasetTokenKey, Model.ValueTokenKeys?.Select(vtk => vtk.Key)?.ToList()),
                                drilldownAction = "FloatProjectingApiLineChart",
                                drilldownController = "Charting",
                                pivot = Model.Pivot
                            });
            } else {
                @await Component.InvokeAsync(typeof(NonProjectingApiGroupedBarChartViewComponent), new {
                                summary = nonProjectingSummary,
                                filter = new Filter<Criterion>(Model.FloatCriteria?.Select(fc => new FloatCriterion(fc.Key, fc.Value, fc.Relation))?.ToList()),
                                timeInterval = new TimeInterval(intervalStart, intervalEnd, null),
                                projection = new SimpleCompositeGroupedProjection<string>(Model.DatasetTokenKey, Model.ValueTokenKeys.Select(vtk => vtk.Key).ToList()),
                                drilldownAction = "NonProjectingApiLineChart",
                                drilldownController = "Charting",
                                pivot = Model.Pivot
                            });
            }
        }
    </div>
</div>