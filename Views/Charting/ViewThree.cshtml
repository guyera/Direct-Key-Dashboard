@using DirectKeyDashboard.Views.Charting
@using DirectKeyDashboard.Charting.Domain
@using System.Globalization

@{
    ViewData["Title"] = "Charting Page";
}

<div class="text-center">
    <div style="display: flex; flex-direction: column; width: 100%; align-items: center;">
        
        <h3 style="margin-top: 50px">Quick Connect Operation Times</h3>
        <h4>Comparison of Duration Types</h4>
        @await Component.InvokeAsync(typeof(QuickConnectOperationTimingsViewComponent))
        <h4 style="margin-top: 20px">Comparison of Operation Types</h4>
        @await Component.InvokeAsync(typeof(QuickConnectOperationTimingsPivotedViewComponent))

        <h3 style="margin-top: 50px">Quick Connect Operation Times</h3>
        <h4 style="margin-top: 20px">Comparison of Duration Types</h4>
        @await Component.InvokeAsync(typeof(FloatProjectingApiGroupedBarChartViewComponent), new {
            summary = new AverageSummary(),
            filter = new Filter(new List<Criterion>(){
                new FloatCriterion("OperationUserIntentDurationMs", 0.0f, FloatCriterion.Relation.NotEqual)
            }),
            timeInterval = new TimeInterval(DateTime.ParseExact("2019-06-01", "yyyy-MM-dd", CultureInfo.InvariantCulture), DateTime.ParseExact("2020-02-01", "yyyy-MM-dd", CultureInfo.InvariantCulture), null),
            projection = new SimpleCompositeGroupedProjection<float>("OperationDescription", new List<string>() {
                "OperationUserIntentDurationMs",
                "OperationTotalDurationMs",
                "OperationDurationMs"
            }),
            pivot = true // Pivot this chart to compare by duration types rather than operation type
        })

        <h4 style="margin-top: 20px">Comparison of Operation Types</h4>
        @await Component.InvokeAsync(typeof(FloatProjectingApiGroupedBarChartViewComponent), new {
            summary = new AverageSummary(),
            filter = new Filter(new List<Criterion>(){
                new FloatCriterion("OperationUserIntentDurationMs", 0.0f, FloatCriterion.Relation.NotEqual)
            }),
            timeInterval = new TimeInterval(DateTime.ParseExact("2019-06-01", "yyyy-MM-dd", CultureInfo.InvariantCulture), DateTime.ParseExact("2020-02-01", "yyyy-MM-dd", CultureInfo.InvariantCulture), null),
            projection = new SimpleCompositeGroupedProjection<float>("OperationDescription", new List<string>() {
                "OperationUserIntentDurationMs",
                "OperationTotalDurationMs",
                "OperationDurationMs"
            })
        })

    </div>
</div>